//
// Generated file, do not edit! Created by nedtool 5.7 from MyPacket.msg.
//

#ifndef __MYPACKET_M_H
#define __MYPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>MyPacket.msg:2</tt> by nedtool.
 * <pre>
 * packet MyPacket
 * {
 *     int game_state;
 *     int srcAddr = -1;
 *     int hopcount = 0;
 *     simtime_t startTime = 0;
 *     int lastHopAddr = -1;
 * 
 * }
 * </pre>
 */
class MyPacket : public ::omnetpp::cPacket
{
  protected:
    int game_state;
    int srcAddr;
    int hopcount;
    ::omnetpp::simtime_t startTime;
    int lastHopAddr;

  private:
    void copy(const MyPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPacket&);

  public:
    MyPacket(const char *name=nullptr, short kind=0);
    MyPacket(const MyPacket& other);
    virtual ~MyPacket();
    MyPacket& operator=(const MyPacket& other);
    virtual MyPacket *dup() const override {return new MyPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getGame_state() const;
    virtual void setGame_state(int game_state);
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getHopcount() const;
    virtual void setHopcount(int hopcount);
    virtual ::omnetpp::simtime_t getStartTime() const;
    virtual void setStartTime(::omnetpp::simtime_t startTime);
    virtual int getLastHopAddr() const;
    virtual void setLastHopAddr(int lastHopAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MYPACKET_M_H

